// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TourManagement_BE.Data.Context;

#nullable disable

namespace TourManagement_BE.Migrations
{
    [DbContext(typeof(MyDBContext))]
    [Migration("20250603145449_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TourManagement_BE.Models.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BookingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("BookingStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<decimal?>("DepositAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("NoteForTour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfAdults")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("NumberOfChildren")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("NumberOfInfants")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<decimal?>("RemainingAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingId")
                        .HasName("PK__Bookings__73951AED7E713091");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("TourManagement_BE.Models.BookingExtraCharge", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExtraChargeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id")
                        .HasName("PK__BookingE__3214EC0770CA08A8");

                    b.HasIndex("BookingId");

                    b.HasIndex("ExtraChargeId");

                    b.ToTable("BookingExtraCharges");
                });

            modelBuilder.Entity("TourManagement_BE.Models.Contract", b =>
                {
                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractFileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("CreatedByTourOperator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("DigitalSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsSignedByCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("SignedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("TourOperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ContractId")
                        .HasName("PK__Contract__C90D3469906515E3");

                    b.HasIndex("BookingId");

                    b.HasIndex("TourOperatorId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("TourManagement_BE.Models.DepartureDate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DepartureDate1")
                        .HasColumnType("date")
                        .HasColumnName("DepartureDate");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__Departur__3214EC07DA56838E");

                    b.HasIndex("TourId");

                    b.ToTable("DepartureDates");
                });

            modelBuilder.Entity("TourManagement_BE.Models.ExtraCharge", b =>
                {
                    b.Property<Guid>("ExtraChargeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ExtraChargeId")
                        .HasName("PK__ExtraCha__23A8433163E6102E");

                    b.ToTable("ExtraCharges");
                });

            modelBuilder.Entity("TourManagement_BE.Models.GuideLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GuideId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__GuideLan__3214EC073D7D8576");

                    b.HasIndex("GuideId");

                    b.HasIndex("LanguageId");

                    b.ToTable("GuideLanguages");
                });

            modelBuilder.Entity("TourManagement_BE.Models.GuideRating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("TourGuideId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RatingId")
                        .HasName("PK__GuideRat__FCCDF87C23B2F91C");

                    b.HasIndex("TourGuideId");

                    b.HasIndex("UserId");

                    b.ToTable("GuideRatings");
                });

            modelBuilder.Entity("TourManagement_BE.Models.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LanguageId")
                        .HasName("PK__Language__B93855ABC3CC294B");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("TourManagement_BE.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AmountPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("PaymentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__9B556A38336B94E0");

                    b.HasIndex("BookingId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TourManagement_BE.Models.PaymentType", b =>
                {
                    b.Property<Guid>("PaymentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PaymentTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentTypeId")
                        .HasName("PK__PaymentT__BA430B353FC67E2A");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("TourManagement_BE.Models.PurchaseTransaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("TourOperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId")
                        .HasName("PK__Purchase__55433A6BA7168FAB");

                    b.HasIndex("PackageId");

                    b.HasIndex("TourOperatorId");

                    b.ToTable("PurchaseTransactions");
                });

            modelBuilder.Entity("TourManagement_BE.Models.PurchasedServicePackage", b =>
                {
                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ActivationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("NumOfToursUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TourOperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PurchaseId")
                        .HasName("PK__Purchase__6B0A6BBE338EF296");

                    b.HasIndex("PackageId");

                    b.HasIndex("TourOperatorId");

                    b.HasIndex("TransactionId");

                    b.ToTable("PurchasedServicePackages");
                });

            modelBuilder.Entity("TourManagement_BE.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE1ADAE76122");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Roles__8A2B6160AA8BB858")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TourManagement_BE.Models.SavedTour", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SavedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__SavedTou__3214EC0763387A86");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedTours");
                });

            modelBuilder.Entity("TourManagement_BE.Models.ServicePackage", b =>
                {
                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("DurationInYears")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxTours")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("PackageId")
                        .HasName("PK__ServiceP__322035CC8E4950CF");

                    b.ToTable("ServicePackages");
                });

            modelBuilder.Entity("TourManagement_BE.Models.Tour", b =>
                {
                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DurationInDays")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxSlots")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("SlotsBooked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("StartPoint")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("TourOperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TourStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Active");

                    b.Property<string>("Transportation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TourId")
                        .HasName("PK__Tours__604CEA3081C3056D");

                    b.HasIndex("TourOperatorId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourCancellation", b =>
                {
                    b.Property<Guid>("CancellationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CancelledAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("CancelledBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CancellationId")
                        .HasName("PK__TourCanc__6A2D9A3A541BFFB0");

                    b.HasIndex("CancelledBy");

                    b.HasIndex("TourId");

                    b.ToTable("TourCancellations");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourCompletionReport", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AttachmentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalExtraCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("TourGuideId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportId")
                        .HasName("PK__TourComp__D5BD4805EDF8A396");

                    b.HasIndex("BookingId");

                    b.HasIndex("TourGuideId");

                    b.ToTable("TourCompletionReports");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__TourExpe__3214EC07E24EFC16");

                    b.HasIndex("TourId");

                    b.ToTable("TourExperiences");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourGuide", b =>
                {
                    b.Property<Guid>("TourGuideId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("TourOperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TourGuideId")
                        .HasName("PK__TourGuid__2F0E03537ACD676D");

                    b.HasIndex("TourOperatorId");

                    b.HasIndex(new[] { "UserId" }, "UQ__TourGuid__1788CC4D40106782")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("TourGuides");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourGuideAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsLeadGuide")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TourGuideId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__TourGuid__3214EC071CAE5430");

                    b.HasIndex("TourGuideId");

                    b.HasIndex("TourId");

                    b.ToTable("TourGuideAssignments");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__TourImag__3214EC079DC64CF5");

                    b.HasIndex("TourId");

                    b.ToTable("TourImages");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourOperator", b =>
                {
                    b.Property<Guid>("TourOperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TourOperatorId")
                        .HasName("PK__TourOper__776E46D942697525");

                    b.HasIndex(new[] { "UserId" }, "UQ__TourOper__1788CC4DD9E06591")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("TourOperators");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourRating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RatingId")
                        .HasName("PK__TourRati__FCCDF87C7EC51D83");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("TourRatings");
                });

            modelBuilder.Entity("TourManagement_BE.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4CE4A6A2AC");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D105345EB09E15")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TourManagement_BE.Models.Booking", b =>
                {
                    b.HasOne("TourManagement_BE.Models.Tour", "Tour")
                        .WithMany("Bookings")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__TourId__09A971A2");

                    b.HasOne("TourManagement_BE.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__UserId__08B54D69");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Models.BookingExtraCharge", b =>
                {
                    b.HasOne("TourManagement_BE.Models.Booking", "Booking")
                        .WithMany("BookingExtraCharges")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__BookingEx__Booki__1BC821DD");

                    b.HasOne("TourManagement_BE.Models.ExtraCharge", "ExtraCharge")
                        .WithMany("BookingExtraCharges")
                        .HasForeignKey("ExtraChargeId")
                        .IsRequired()
                        .HasConstraintName("FK__BookingEx__Extra__1CBC4616");

                    b.Navigation("Booking");

                    b.Navigation("ExtraCharge");
                });

            modelBuilder.Entity("TourManagement_BE.Models.Contract", b =>
                {
                    b.HasOne("TourManagement_BE.Models.Booking", "Booking")
                        .WithMany("Contracts")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Contracts__Booki__32AB8735");

                    b.HasOne("TourManagement_BE.Models.TourOperator", "TourOperator")
                        .WithMany("Contracts")
                        .HasForeignKey("TourOperatorId")
                        .IsRequired()
                        .HasConstraintName("FK__Contracts__TourO__339FAB6E");

                    b.Navigation("Booking");

                    b.Navigation("TourOperator");
                });

            modelBuilder.Entity("TourManagement_BE.Models.DepartureDate", b =>
                {
                    b.HasOne("TourManagement_BE.Models.Tour", "Tour")
                        .WithMany("DepartureDates")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__Departure__TourI__00200768");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TourManagement_BE.Models.GuideLanguage", b =>
                {
                    b.HasOne("TourManagement_BE.Models.TourGuide", "Guide")
                        .WithMany("GuideLanguages")
                        .HasForeignKey("GuideId")
                        .HasConstraintName("FK__GuideLang__Guide__5DCAEF64");

                    b.HasOne("TourManagement_BE.Models.Language", "Language")
                        .WithMany("GuideLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK__GuideLang__Langu__5EBF139D");

                    b.Navigation("Guide");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TourManagement_BE.Models.GuideRating", b =>
                {
                    b.HasOne("TourManagement_BE.Models.TourGuide", "TourGuide")
                        .WithMany("GuideRatings")
                        .HasForeignKey("TourGuideId")
                        .IsRequired()
                        .HasConstraintName("FK__GuideRati__TourG__2BFE89A6");

                    b.HasOne("TourManagement_BE.Models.User", "User")
                        .WithMany("GuideRatings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__GuideRati__UserI__2CF2ADDF");

                    b.Navigation("TourGuide");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Models.Payment", b =>
                {
                    b.HasOne("TourManagement_BE.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Payments__Bookin__40058253");

                    b.HasOne("TourManagement_BE.Models.PaymentType", "PaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Payments__Paymen__41EDCAC5");

                    b.HasOne("TourManagement_BE.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Payments__UserId__40F9A68C");

                    b.Navigation("Booking");

                    b.Navigation("PaymentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Models.PurchaseTransaction", b =>
                {
                    b.HasOne("TourManagement_BE.Models.ServicePackage", "Package")
                        .WithMany("PurchaseTransactions")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("FK__PurchaseT__Packa__693CA210");

                    b.HasOne("TourManagement_BE.Models.TourOperator", "TourOperator")
                        .WithMany("PurchaseTransactions")
                        .HasForeignKey("TourOperatorId")
                        .IsRequired()
                        .HasConstraintName("FK__PurchaseT__TourO__68487DD7");

                    b.Navigation("Package");

                    b.Navigation("TourOperator");
                });

            modelBuilder.Entity("TourManagement_BE.Models.PurchasedServicePackage", b =>
                {
                    b.HasOne("TourManagement_BE.Models.ServicePackage", "Package")
                        .WithMany("PurchasedServicePackages")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("FK__Purchased__Packa__6FE99F9F");

                    b.HasOne("TourManagement_BE.Models.TourOperator", "TourOperator")
                        .WithMany("PurchasedServicePackages")
                        .HasForeignKey("TourOperatorId")
                        .IsRequired()
                        .HasConstraintName("FK__Purchased__TourO__6EF57B66");

                    b.HasOne("TourManagement_BE.Models.PurchaseTransaction", "Transaction")
                        .WithMany("PurchasedServicePackages")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("FK__Purchased__Trans__70DDC3D8");

                    b.Navigation("Package");

                    b.Navigation("TourOperator");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("TourManagement_BE.Models.SavedTour", b =>
                {
                    b.HasOne("TourManagement_BE.Models.Tour", "Tour")
                        .WithMany("SavedTours")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__SavedTour__TourI__2180FB33");

                    b.HasOne("TourManagement_BE.Models.User", "User")
                        .WithMany("SavedTours")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__SavedTour__UserI__208CD6FA");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Models.Tour", b =>
                {
                    b.HasOne("TourManagement_BE.Models.TourOperator", "TourOperator")
                        .WithMany("Tours")
                        .HasForeignKey("TourOperatorId")
                        .IsRequired()
                        .HasConstraintName("FK__Tours__TourOpera__778AC167");

                    b.Navigation("TourOperator");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourCancellation", b =>
                {
                    b.HasOne("TourManagement_BE.Models.User", "CancelledByNavigation")
                        .WithMany("TourCancellations")
                        .HasForeignKey("CancelledBy")
                        .IsRequired()
                        .HasConstraintName("FK__TourCance__Cance__3864608B");

                    b.HasOne("TourManagement_BE.Models.Tour", "Tour")
                        .WithMany("TourCancellations")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__TourCance__TourI__37703C52");

                    b.Navigation("CancelledByNavigation");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourCompletionReport", b =>
                {
                    b.HasOne("TourManagement_BE.Models.Booking", "Booking")
                        .WithMany("TourCompletionReports")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__TourCompl__Booki__46B27FE2");

                    b.HasOne("TourManagement_BE.Models.TourGuide", "TourGuide")
                        .WithMany("TourCompletionReports")
                        .HasForeignKey("TourGuideId")
                        .IsRequired()
                        .HasConstraintName("FK__TourCompl__TourG__47A6A41B");

                    b.Navigation("Booking");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourExperience", b =>
                {
                    b.HasOne("TourManagement_BE.Models.Tour", "Tour")
                        .WithMany("TourExperiences")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__TourExper__TourI__05D8E0BE");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourGuide", b =>
                {
                    b.HasOne("TourManagement_BE.Models.TourOperator", "TourOperator")
                        .WithMany("TourGuides")
                        .HasForeignKey("TourOperatorId")
                        .HasConstraintName("FK__TourGuide__TourO__5812160E");

                    b.HasOne("TourManagement_BE.Models.User", "User")
                        .WithOne("TourGuide")
                        .HasForeignKey("TourManagement_BE.Models.TourGuide", "UserId")
                        .HasConstraintName("FK__TourGuide__UserI__571DF1D5");

                    b.Navigation("TourOperator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourGuideAssignment", b =>
                {
                    b.HasOne("TourManagement_BE.Models.TourGuide", "TourGuide")
                        .WithMany("TourGuideAssignments")
                        .HasForeignKey("TourGuideId")
                        .IsRequired()
                        .HasConstraintName("FK__TourGuide__TourG__7D439ABD");

                    b.HasOne("TourManagement_BE.Models.Tour", "Tour")
                        .WithMany("TourGuideAssignments")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__TourGuide__TourI__7C4F7684");

                    b.Navigation("Tour");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourImage", b =>
                {
                    b.HasOne("TourManagement_BE.Models.Tour", "Tour")
                        .WithMany("TourImages")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__TourImage__TourI__02FC7413");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourOperator", b =>
                {
                    b.HasOne("TourManagement_BE.Models.User", "User")
                        .WithOne("TourOperator")
                        .HasForeignKey("TourManagement_BE.Models.TourOperator", "UserId")
                        .HasConstraintName("FK__TourOpera__UserI__52593CB8");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourRating", b =>
                {
                    b.HasOne("TourManagement_BE.Models.Tour", "Tour")
                        .WithMany("TourRatings")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__TourRatin__TourI__2645B050");

                    b.HasOne("TourManagement_BE.Models.User", "User")
                        .WithMany("TourRatings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__TourRatin__UserI__2739D489");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Models.User", b =>
                {
                    b.HasOne("TourManagement_BE.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Users__RoleId__4D94879B");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TourManagement_BE.Models.Booking", b =>
                {
                    b.Navigation("BookingExtraCharges");

                    b.Navigation("Contracts");

                    b.Navigation("Payments");

                    b.Navigation("TourCompletionReports");
                });

            modelBuilder.Entity("TourManagement_BE.Models.ExtraCharge", b =>
                {
                    b.Navigation("BookingExtraCharges");
                });

            modelBuilder.Entity("TourManagement_BE.Models.Language", b =>
                {
                    b.Navigation("GuideLanguages");
                });

            modelBuilder.Entity("TourManagement_BE.Models.PaymentType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TourManagement_BE.Models.PurchaseTransaction", b =>
                {
                    b.Navigation("PurchasedServicePackages");
                });

            modelBuilder.Entity("TourManagement_BE.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TourManagement_BE.Models.ServicePackage", b =>
                {
                    b.Navigation("PurchaseTransactions");

                    b.Navigation("PurchasedServicePackages");
                });

            modelBuilder.Entity("TourManagement_BE.Models.Tour", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("DepartureDates");

                    b.Navigation("SavedTours");

                    b.Navigation("TourCancellations");

                    b.Navigation("TourExperiences");

                    b.Navigation("TourGuideAssignments");

                    b.Navigation("TourImages");

                    b.Navigation("TourRatings");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourGuide", b =>
                {
                    b.Navigation("GuideLanguages");

                    b.Navigation("GuideRatings");

                    b.Navigation("TourCompletionReports");

                    b.Navigation("TourGuideAssignments");
                });

            modelBuilder.Entity("TourManagement_BE.Models.TourOperator", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("PurchaseTransactions");

                    b.Navigation("PurchasedServicePackages");

                    b.Navigation("TourGuides");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("TourManagement_BE.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("GuideRatings");

                    b.Navigation("Payments");

                    b.Navigation("SavedTours");

                    b.Navigation("TourCancellations");

                    b.Navigation("TourGuide");

                    b.Navigation("TourOperator");

                    b.Navigation("TourRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
