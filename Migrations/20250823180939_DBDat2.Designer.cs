// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TourManagement_BE.Data.Context;

#nullable disable

namespace TourManagement_BE.Migrations
{
    [DbContext(typeof(MyDBContext))]
    [Migration("20250823180939_DBDat2")]
    partial class DBDat2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TourManagement_BE.Data.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime?>("BookingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("BookingStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<string>("Contract")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DepartureDateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("NoteForTour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfAdults")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("NumberOfChildren")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("NumberOfInfants")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId")
                        .HasName("PK__Bookings__73951AED69F9C654");

                    b.HasIndex(new[] { "DepartureDateId" }, "IX_Bookings_DepartureDateId");

                    b.HasIndex(new[] { "TourId" }, "IX_Bookings_TourId");

                    b.HasIndex(new[] { "UserId" }, "IX_Bookings_UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.DepartureDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DepartureDate1")
                        .HasColumnType("datetime")
                        .HasColumnName("DepartureDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsCancelDate")
                        .HasColumnType("bit");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Departur__3214EC07D728106D");

                    b.HasIndex(new[] { "TourId" }, "IX_DepartureDates_TourId");

                    b.ToTable("DepartureDates");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.GuideLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GuideId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__GuideLan__3214EC0754BC5DEE");

                    b.HasIndex(new[] { "GuideId" }, "IX_GuideLanguages_GuideId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_GuideLanguages_LanguageId");

                    b.ToTable("GuideLanguages");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.GuideNote", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DepartureDateId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ExtraCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("NoteId")
                        .HasName("PK__GuideNot__EACE355F7D9F9B80");

                    b.HasIndex(new[] { "AssignmentId" }, "IX_GuideNotes_AssignmentId");

                    b.HasIndex(new[] { "BookingId" }, "IX_GuideNotes_BookingId");

                    b.HasIndex(new[] { "ReportId" }, "IX_GuideNotes_ReportId");

                    b.ToTable("GuideNotes");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.GuideNoteMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__GuideNot__3214EC078F6A2553");

                    b.HasIndex(new[] { "NoteId" }, "IX_GuideNoteMedia_NoteId");

                    b.ToTable("GuideNoteMedia");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.GuideRating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("MediaUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RatingId")
                        .HasName("PK__GuideRat__FCCDF87C1044E830");

                    b.HasIndex(new[] { "AssignmentId" }, "IX_GuideRatings_AssignmentId");

                    b.HasIndex(new[] { "TourGuideId" }, "IX_GuideRatings_TourGuideId");

                    b.HasIndex(new[] { "UserId" }, "IX_GuideRatings_UserId");

                    b.ToTable("GuideRatings");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.ItineraryMedia", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaId"));

                    b.Property<string>("Caption")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ItineraryId")
                        .HasColumnType("int");

                    b.Property<string>("MediaType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("MediaId")
                        .HasName("PK__Itinerar__B2C2B5CFEA6D2966");

                    b.HasIndex(new[] { "ItineraryId" }, "IX_ItineraryMedia_ItineraryId");

                    b.ToTable("ItineraryMedia");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LanguageId")
                        .HasName("PK__Language__B93855AB17FB757D");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RelatedEntityId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20B2F72112345678");

                    b.HasIndex(new[] { "UserId" }, "IX_Notifications_UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AmountPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__9B556A389E758151");

                    b.HasIndex(new[] { "BookingId" }, "IX_Payments_BookingId");

                    b.HasIndex(new[] { "PaymentTypeId" }, "IX_Payments_PaymentTypeId");

                    b.HasIndex(new[] { "UserId" }, "IX_Payments_UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentTypeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PaymentTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentTypeId")
                        .HasName("PK__PaymentT__BA430B35A0EA8336");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.PurchaseTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ContentCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("TourOperatorId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId")
                        .HasName("PK__Purchase__55433A6B7EA420F9");

                    b.HasIndex(new[] { "PackageId" }, "IX_PurchaseTransactions_PackageId");

                    b.HasIndex(new[] { "TourOperatorId" }, "IX_PurchaseTransactions_TourOperatorId");

                    b.ToTable("PurchaseTransactions");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.PurchasedServicePackage", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"));

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("NumOfToursUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("TourOperatorId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId")
                        .HasName("PK__Purchase__6B0A6BBE22291CBE");

                    b.HasIndex(new[] { "PackageId" }, "IX_PurchasedServicePackages_PackageId");

                    b.HasIndex(new[] { "TourOperatorId" }, "IX_PurchasedServicePackages_TourOperatorId");

                    b.HasIndex(new[] { "TransactionId" }, "IX_PurchasedServicePackages_TransactionId");

                    b.ToTable("PurchasedServicePackages");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.ResetPasswordToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ResetPasswordTokens");

                    b.HasIndex(new[] { "UserId" }, "IX_ResetPasswordTokens_UserId");

                    b.ToTable("ResetPasswordTokens");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE1A793714B3");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Roles__8A2B616060CD7784")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.SavedTour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("SavedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__SavedTou__3214EC0795DB6045");

                    b.HasIndex(new[] { "TourId" }, "IX_SavedTours_TourId");

                    b.HasIndex(new[] { "UserId" }, "IX_SavedTours_UserId");

                    b.ToTable("SavedTours");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.ServicePackage", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxImage")
                        .HasColumnType("int");

                    b.Property<int>("MaxTour")
                        .HasColumnType("int");

                    b.Property<bool>("MaxVideo")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("TourGuideFunction")
                        .HasColumnType("bit");

                    b.HasKey("PackageId")
                        .HasName("PK__ServiceP__322035CC2CFB51A1");

                    b.ToTable("ServicePackages");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.ServicePackageFeature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FeatureValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.HasKey("FeatureId")
                        .HasName("PK__ServiceP__82230BC98B4657F8");

                    b.HasIndex("PackageId");

                    b.ToTable("ServicePackageFeatures");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DurationInDays")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxSlots")
                        .HasColumnType("int");

                    b.Property<int>("MinSlots")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceOfAdults")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PriceOfChildren")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PriceOfInfants")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("SlotsBooked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("StartPoint")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TourAvartar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TourOperatorId")
                        .HasColumnType("int");

                    b.Property<string>("TourStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Active");

                    b.Property<string>("Transportation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TourId")
                        .HasName("PK__Tours__604CEA3014B7154A");

                    b.HasIndex(new[] { "TourOperatorId" }, "IX_Tours_TourOperatorId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourAcceptanceReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<string>("AttachmentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("TotalExtraCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int");

                    b.HasKey("ReportId")
                        .HasName("PK__TourAcce__D5BD480579C896E8");

                    b.HasIndex(new[] { "BookingId" }, "IX_TourAcceptanceReports_BookingId");

                    b.HasIndex(new[] { "TourGuideId" }, "IX_TourAcceptanceReports_TourGuideId");

                    b.ToTable("TourAcceptanceReports");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__TourExpe__3214EC0771B42547");

                    b.HasIndex(new[] { "TourId" }, "IX_TourExperiences_TourId");

                    b.ToTable("TourExperiences");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourGuide", b =>
                {
                    b.Property<int>("TourGuideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourGuideId"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("TourOperatorId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TourGuideId")
                        .HasName("PK__TourGuid__2F0E035344C0797A");

                    b.HasIndex(new[] { "TourOperatorId" }, "IX_TourGuides_TourOperatorId");

                    b.HasIndex(new[] { "UserId" }, "UQ__TourGuid__1788CC4D814900F4")
                        .IsUnique()
                        .HasFilter("([UserId] IS NOT NULL)");

                    b.ToTable("TourGuides");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourGuideAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DepartureDateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsLeadGuide")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__TourGuid__3214EC073C3A4EB5");

                    b.HasIndex(new[] { "DepartureDateId" }, "IX_TourGuideAssignments_DepartureDateId");

                    b.HasIndex(new[] { "TourGuideId" }, "IX_TourGuideAssignments_TourGuideId");

                    b.ToTable("TourGuideAssignments");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourItinerary", b =>
                {
                    b.Property<int>("ItineraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItineraryId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("ItineraryId")
                        .HasName("PK__TourItin__361216C6A8FF1462");

                    b.HasIndex(new[] { "TourId" }, "IX_TourItineraries_TourId");

                    b.ToTable("TourItineraries");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("MediaType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MediaUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__TourMedi__3214EC07762CE9DE");

                    b.HasIndex(new[] { "TourId" }, "IX_TourMedia_TourId");

                    b.ToTable("TourMedia");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourOperator", b =>
                {
                    b.Property<int>("TourOperatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourOperatorId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyLogo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EstablishedYear")
                        .HasColumnType("int");

                    b.Property<string>("Facebook")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Hotline")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateOnly?>("LicenseIssuedDate")
                        .HasColumnType("date");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WorkingHours")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TourOperatorId")
                        .HasName("PK__TourOper__776E46D99CB4F975");

                    b.HasIndex(new[] { "UserId" }, "UQ__TourOper__1788CC4D657A0885")
                        .IsUnique()
                        .HasFilter("([UserId] IS NOT NULL)");

                    b.ToTable("TourOperators");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourOperatorMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TourOperatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__TourOper__3214EC076E5C56CE");

                    b.HasIndex(new[] { "TourOperatorId" }, "IX_TourOperatorMedia_TourOperatorId");

                    b.ToTable("TourOperatorMedia");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourRating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("MediaUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RatingId")
                        .HasName("PK__TourRati__FCCDF87C99F24843");

                    b.HasIndex(new[] { "TourId" }, "IX_TourRatings_TourId");

                    b.HasIndex(new[] { "UserId" }, "IX_TourRatings_UserId");

                    b.ToTable("TourRatings");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4C6EA58613");

                    b.HasIndex(new[] { "RoleId" }, "IX_Users_RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534A733E8F8");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.Booking", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.DepartureDate", "DepartureDate")
                        .WithMany("Bookings")
                        .HasForeignKey("DepartureDateId")
                        .IsRequired()
                        .HasConstraintName("FK_Bookings_DepartureDates");

                    b.HasOne("TourManagement_BE.Data.Models.Tour", "Tour")
                        .WithMany("Bookings")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__TourId__41EDCAC5");

                    b.HasOne("TourManagement_BE.Data.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__UserId__42E1EEFE");

                    b.Navigation("DepartureDate");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.DepartureDate", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.Tour", "Tour")
                        .WithMany("DepartureDates")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__Departure__TourI__43D61337");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.GuideLanguage", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.TourGuide", "Guide")
                        .WithMany("GuideLanguages")
                        .HasForeignKey("GuideId")
                        .HasConstraintName("FK__GuideLang__Guide__44CA3770");

                    b.HasOne("TourManagement_BE.Data.Models.Language", "Language")
                        .WithMany("GuideLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK__GuideLang__Langu__45BE5BA9");

                    b.Navigation("Guide");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.GuideNote", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.TourGuideAssignment", "Assignment")
                        .WithMany("GuideNotes")
                        .HasForeignKey("AssignmentId")
                        .IsRequired()
                        .HasConstraintName("FK__GuideNote__Assig__47A6A41B");

                    b.HasOne("TourManagement_BE.Data.Models.Booking", "Booking")
                        .WithMany("GuideNotes")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_GuideNotes_Bookings");

                    b.HasOne("TourManagement_BE.Data.Models.TourAcceptanceReport", "Report")
                        .WithMany("GuideNotes")
                        .HasForeignKey("ReportId")
                        .IsRequired()
                        .HasConstraintName("FK_GuideNotes_TourAcceptanceReports");

                    b.Navigation("Assignment");

                    b.Navigation("Booking");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.GuideNoteMedia", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.GuideNote", "Note")
                        .WithMany("GuideNoteMedia")
                        .HasForeignKey("NoteId")
                        .IsRequired()
                        .HasConstraintName("FK__GuideNote__NoteI__46B27FE2");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.GuideRating", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.TourGuideAssignment", "Assignment")
                        .WithMany("GuideRatings")
                        .HasForeignKey("AssignmentId")
                        .IsRequired()
                        .HasConstraintName("FK__GuideRati__Assig__489AC854");

                    b.HasOne("TourManagement_BE.Data.Models.TourGuide", "TourGuide")
                        .WithMany("GuideRatings")
                        .HasForeignKey("TourGuideId")
                        .IsRequired()
                        .HasConstraintName("FK__GuideRati__TourG__4A8310C6");

                    b.HasOne("TourManagement_BE.Data.Models.User", "User")
                        .WithMany("GuideRatings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__GuideRati__UserI__498EEC8D");

                    b.Navigation("Assignment");

                    b.Navigation("TourGuide");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.ItineraryMedia", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.TourItinerary", "Itinerary")
                        .WithMany("ItineraryMedia")
                        .HasForeignKey("ItineraryId")
                        .IsRequired()
                        .HasConstraintName("FK__Itinerary__Itine__4A8310C6");

                    b.Navigation("Itinerary");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.Notification", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__UserI__6555E2C9");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.Payment", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Payments__Bookin__4B7734FF");

                    b.HasOne("TourManagement_BE.Data.Models.PaymentType", "PaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Payments__Paymen__4C6B5938");

                    b.HasOne("TourManagement_BE.Data.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Payments__UserId__4D5F7D71");

                    b.Navigation("Booking");

                    b.Navigation("PaymentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.PurchaseTransaction", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.ServicePackage", "Package")
                        .WithMany("PurchaseTransactions")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("FK__PurchaseT__Packa__51300E55");

                    b.HasOne("TourManagement_BE.Data.Models.TourOperator", "TourOperator")
                        .WithMany("PurchaseTransactions")
                        .HasForeignKey("TourOperatorId")
                        .IsRequired()
                        .HasConstraintName("FK__PurchaseT__TourO__5224328E");

                    b.Navigation("Package");

                    b.Navigation("TourOperator");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.PurchasedServicePackage", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.ServicePackage", "Package")
                        .WithMany("PurchasedServicePackages")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("FK__Purchased__Packa__4E53A1AA");

                    b.HasOne("TourManagement_BE.Data.Models.TourOperator", "TourOperator")
                        .WithMany("PurchasedServicePackages")
                        .HasForeignKey("TourOperatorId")
                        .IsRequired()
                        .HasConstraintName("FK__Purchased__TourO__4F47C5E3");

                    b.HasOne("TourManagement_BE.Data.Models.PurchaseTransaction", "Transaction")
                        .WithMany("PurchasedServicePackages")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("FK__Purchased__Trans__503BEA1C");

                    b.Navigation("Package");

                    b.Navigation("TourOperator");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.ResetPasswordToken", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.User", "User")
                        .WithMany("ResetPasswordTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ResetPasswordTokens_Users_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.SavedTour", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.Tour", "Tour")
                        .WithMany("SavedTours")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__SavedTour__TourI__531856C7");

                    b.HasOne("TourManagement_BE.Data.Models.User", "User")
                        .WithMany("SavedTours")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__SavedTour__UserI__540C7B00");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.ServicePackageFeature", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.ServicePackage", "Package")
                        .WithMany("ServicePackageFeatures")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("FK__ServicePa__Packa__5CD6CB2B");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.Tour", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.TourOperator", "TourOperator")
                        .WithMany("Tours")
                        .HasForeignKey("TourOperatorId")
                        .IsRequired()
                        .HasConstraintName("FK__Tours__TourOpera__634EBE90");

                    b.Navigation("TourOperator");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourAcceptanceReport", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.Booking", "Booking")
                        .WithMany("TourAcceptanceReports")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__TourAccep__Booki__55009F39");

                    b.HasOne("TourManagement_BE.Data.Models.TourGuide", "TourGuide")
                        .WithMany("TourAcceptanceReports")
                        .HasForeignKey("TourGuideId")
                        .IsRequired()
                        .HasConstraintName("FK__TourAccep__TourG__55F4C372");

                    b.Navigation("Booking");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourExperience", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.Tour", "Tour")
                        .WithMany("TourExperiences")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__TourExper__TourI__58D1301D");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourGuide", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.TourOperator", "TourOperator")
                        .WithMany("TourGuides")
                        .HasForeignKey("TourOperatorId")
                        .HasConstraintName("FK__TourGuide__TourO__5BAD9CC8");

                    b.HasOne("TourManagement_BE.Data.Models.User", "User")
                        .WithOne("TourGuide")
                        .HasForeignKey("TourManagement_BE.Data.Models.TourGuide", "UserId")
                        .HasConstraintName("FK__TourGuide__UserI__5CA1C101");

                    b.Navigation("TourOperator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourGuideAssignment", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.DepartureDate", "DepartureDate")
                        .WithMany("TourGuideAssignments")
                        .HasForeignKey("DepartureDateId")
                        .IsRequired()
                        .HasConstraintName("FK_TourGuideAssignments_DepartureDates");

                    b.HasOne("TourManagement_BE.Data.Models.TourGuide", "TourGuide")
                        .WithMany("TourGuideAssignments")
                        .HasForeignKey("TourGuideId")
                        .IsRequired()
                        .HasConstraintName("FK__TourGuide__TourG__5AB9788F");

                    b.Navigation("DepartureDate");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourItinerary", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.Tour", "Tour")
                        .WithMany("TourItineraries")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__TourItine__TourI__5D95E53A");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourMedia", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.Tour", "Tour")
                        .WithMany("TourMedia")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__TourMedia__TourI__5E8A0973");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourOperator", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.User", "User")
                        .WithOne("TourOperator")
                        .HasForeignKey("TourManagement_BE.Data.Models.TourOperator", "UserId")
                        .HasConstraintName("FK__TourOpera__UserI__607251E5");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourOperatorMedia", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.TourOperator", "TourOperator")
                        .WithMany("TourOperatorMedia")
                        .HasForeignKey("TourOperatorId")
                        .IsRequired()
                        .HasConstraintName("FK__TourOpera__TourO__5F7E2DAC");

                    b.Navigation("TourOperator");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourRating", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.Tour", "Tour")
                        .WithMany("TourRatings")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__TourRatin__TourI__6166761E");

                    b.HasOne("TourManagement_BE.Data.Models.User", "User")
                        .WithMany("TourRatings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__TourRatin__UserI__625A9A57");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.User", b =>
                {
                    b.HasOne("TourManagement_BE.Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Users__RoleId__6442E2C9");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.Booking", b =>
                {
                    b.Navigation("GuideNotes");

                    b.Navigation("Payments");

                    b.Navigation("TourAcceptanceReports");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.DepartureDate", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TourGuideAssignments");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.GuideNote", b =>
                {
                    b.Navigation("GuideNoteMedia");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.Language", b =>
                {
                    b.Navigation("GuideLanguages");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.PaymentType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.PurchaseTransaction", b =>
                {
                    b.Navigation("PurchasedServicePackages");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.ServicePackage", b =>
                {
                    b.Navigation("PurchaseTransactions");

                    b.Navigation("PurchasedServicePackages");

                    b.Navigation("ServicePackageFeatures");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.Tour", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("DepartureDates");

                    b.Navigation("SavedTours");

                    b.Navigation("TourExperiences");

                    b.Navigation("TourItineraries");

                    b.Navigation("TourMedia");

                    b.Navigation("TourRatings");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourAcceptanceReport", b =>
                {
                    b.Navigation("GuideNotes");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourGuide", b =>
                {
                    b.Navigation("GuideLanguages");

                    b.Navigation("GuideRatings");

                    b.Navigation("TourAcceptanceReports");

                    b.Navigation("TourGuideAssignments");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourGuideAssignment", b =>
                {
                    b.Navigation("GuideNotes");

                    b.Navigation("GuideRatings");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourItinerary", b =>
                {
                    b.Navigation("ItineraryMedia");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.TourOperator", b =>
                {
                    b.Navigation("PurchaseTransactions");

                    b.Navigation("PurchasedServicePackages");

                    b.Navigation("TourGuides");

                    b.Navigation("TourOperatorMedia");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("TourManagement_BE.Data.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("GuideRatings");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("ResetPasswordTokens");

                    b.Navigation("SavedTours");

                    b.Navigation("TourGuide");

                    b.Navigation("TourOperator");

                    b.Navigation("TourRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
